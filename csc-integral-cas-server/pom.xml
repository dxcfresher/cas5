<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>com.csc.integral.cas</groupId>
    <artifactId>cas-parent-pom</artifactId>
    <version>1.1.3-SNAPSHOT</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <artifactId>csc-integral-cas-server</artifactId>
  <packaging>war</packaging>

  <properties>
    <main.basedir>${project.parent.basedir}</main.basedir>
    <checkstyle.skip>false</checkstyle.skip>
    <findbugs.skip>false</findbugs.skip>

    <com.csc.integral.common.version>3.0.1</com.csc.integral.common.version>

    <cas.version>3.4.5</cas.version>
    <!--  <cas.applicationServer>apache-tomcat-6.0.20</cas.applicationServer>-->
    <cas.applicationServer>apache-tomcat-8.0.24</cas.applicationServer>
    <!--<cas.applicatiionServerDownloadUrl>http://archive.apache.org/dist/tomcat/tomcat-6/v6.0.20/bin/apache-tomcat-6.0.20.zip</cas.applicatiionServerDownloadUrl>-->
    <cas.applicatiionServerDownloadUrl>http://archive.apache.org/dist/tomcat/tomcat-8/v8.0.24/bin/apache-tomcat-8.0.24.zip</cas.applicatiionServerDownloadUrl>

    <springframework.core.release>3.0.5.RELEASE</springframework.core.release>
    <screen.product.info>CAS ${version}</screen.product.info>
  </properties>

  <repositories>
    <repository>
      <id>ja-sig</id>
      <name>Repository for resolving dependency on CAS</name>
      <url>http://oss.sonatype.org/content/repositories/releases/</url>
    </repository>
  </repositories>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-eclipse-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <ajdtVersion>none</ajdtVersion>
          <downloadSources>false</downloadSources>
          <downloadJavadocs>false</downloadJavadocs>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.1.1</version>
        <configuration>
          <warName>cas</warName>
          <!-- Don't use Hibernate -->
          <dependentWarExcludes>WEB-INF/lib/aspectjweaver-1.6.7.jar,WEB-INF/lib/aspectjrt-1.6.7.jar,WEB-INF/lib/hibernate-jpa-*,WEB-INF/lib/hibernate-annotations-*.jar,WEB-INF/lib/hibernate-commons-annotations-*.jar,WEB-INF/lib/hibernate-core-*.jar</dependentWarExcludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <outputDirectory>${project.build.directory}/dependencies</outputDirectory>
          <includeArtifactIds>csc-integral-installer,csc-integral-libtcnative</includeArtifactIds>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.6</version>
        <executions>
          <execution>
            <phase>package</phase>
            <configuration>
              <target>
                <!-- Gen key -->
                <!--<echo message="Creating private key ..." />
                <echo message="Running OS is: ${os.name}" />
                <echo message="Target server is: ${cas.host.name}" />

                <property name="openssl.conf" value="${basedir}/resources/openssl/openssl-${cas.host.name}.cnf" />
                <property name="openssl.bin" value="${basedir}/target/openssl/gnuwin32-openssl/bin" />

                <mkdir dir="${basedir}/target/openssl" />
                <unzip src="${basedir}/resources/openssl/demoCA.zip" dest="${basedir}/target/openssl" overwrite="true" />
                <unzip src="${basedir}/resources/openssl/openssl-0.9.8h-1-bin.zip" dest="${basedir}/target/openssl/gnuwin32-openssl" overwrite="true" />
				-->
                <!-- //For Windows, we need to run on a special build for openssl  -->
                <!--<exec dir="${basedir}/target/openssl" executable="${openssl.bin}/openssl" >
                  <arg line="req -new -keyout newkey.pem -out newreq.pem -days 365 -batch -config ${openssl.conf}" />
                </exec>

                <exec dir="${basedir}/target/openssl" executable="${openssl.bin}/openssl" >
                  <arg line="ca -batch -in newreq.pem -out newcert.pem -config ${openssl.conf} -policy policy_any -passin pass:changeit" />
                </exec>

                <exec dir="${basedir}/target/openssl" executable="${openssl.bin}/openssl" >
                  <arg line="pkcs12 -export -chain -in newcert.pem -inkey newkey.pem -passin pass:changeit -CAfile demoCA/cacert.pem -out casserver.p12 -passout pass:changeit" />
                </exec>

                <exec dir="${basedir}/target/openssl" executable="${openssl.bin}/openssl" >
                  <arg line="x509 -in demoCA/cacert.pem -outform PEM -out cacert.headless.pem" />
                </exec>
				-->
                <!-- //For Linux, assume that we always have openssl in place -->
                <!--<exec dir="${basedir}/target/openssl" executable="openssl" os="Linux">
                  <arg line="req -new -keyout newkey.pem -out newreq.pem -days 365 -batch -config ${openssl.conf}" />
                </exec>

                <exec dir="${basedir}/target/openssl" executable="openssl" os="Linux">
                  <arg line="ca -batch -in newreq.pem -out newcert.pem -config ${openssl.conf} -policy policy_any -passin pass:changeit" />
                </exec>

                <exec dir="${basedir}/target/openssl" executable="openssl" os="Linux">
                  <arg line="pkcs12 -export -chain -in newcert.pem -inkey newkey.pem -passin pass:changeit -CAfile demoCA/cacert.pem -out casserver.p12 -passout pass:changeit" />
                </exec>

                <exec dir="${basedir}/target/openssl" executable="openssl" os="Linux">
                  <arg line="x509 -in demoCA/cacert.pem -outform PEM -out cacert.headless.pem" />
                </exec>
				-->
                <!-- build tomcat -->
                <echo message="Building application server..." />
                <echo message="Will download ${cas.applicationServer}.zip" />
                <mkdir dir="${java.io.tmpdir}/tomcat" />
                <get src="${cas.applicatiionServerDownloadUrl}" dest="${java.io.tmpdir}/tomcat/${cas.applicationServer}.zip" skipexisting="true" />
                <unzip src="${java.io.tmpdir}/tomcat/${cas.applicationServer}.zip" dest="${basedir}/target" overwrite="false" />

                <mkdir dir="${basedir}/target/${cas.applicationServer}/webapps/cas" />
                <copy todir="${basedir}/target/${cas.applicationServer}/webapps/cas">
                  <fileset dir="${project.build.directory}/csc-integral-cas-server-${project.version}">
                    <include name="**/*" />
                  </fileset>
                </copy>

                <copy file="${basedir}/resources/server.xml" todir="${basedir}/target/${cas.applicationServer}/conf" />
                <copy file="${basedir}/resources/context.xml" todir="${basedir}/target/${cas.applicationServer}/conf" />
                <!--<copy file="${basedir}/target/openssl/casserver.p12" todir="${basedir}/target/${cas.applicationServer}/conf" />
				-->
                <!-- Copy Tomcat Native Library -->
                <unzip src="${project.build.directory}/dependencies/csc-integral-libtcnative-${com.csc.integral.common.version}.zip"
                    dest="${project.build.directory}/dependencies"/>
                <copy file="${project.build.directory}/dependencies/setenv.sh"
                    todir="${project.build.directory}/${cas.applicationServer}/bin" />

                <copy file="${project.build.directory}/dependencies/libtcnative-1.1.20-el5-x86_64.tar.gz"
                    todir="${project.build.directory}/${cas.applicationServer}/bin" />
                <copy file="${project.build.directory}/dependencies/libtcnative-1.1.20-solaris-sparc.tar.gz"
                    todir="${project.build.directory}/${cas.applicationServer}/bin" />

                <echo message="Building application server successful!" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>

          <execution>
            <id>create-installer-package</id>
            <phase>package</phase>
            <configuration>
              <target>
                <echo>---------------------------------------------------</echo>
                <echo>Create Installer Package</echo>
                <echo>---------------------------------------------------</echo>

                <property name="installer.resources" value="${basedir}/installer"/>
                <property name="installer.payload" value="${project.build.directory}/installer"/>

                <delete dir="${installer.payload}"/>
                <mkdir dir="${installer.payload}"/>

                <tar destfile="${installer.payload}/csc-integral-cas-server.tar"
                    basedir="${project.build.directory}/${cas.applicationServer}"
                    longfile="gnu"/>

                <copy file="${installer.resources}/install.sh" todir="${installer.payload}"/>
                <replace file="${installer.payload}/install.sh">
                  <replacetoken>@CAS_VER@</replacetoken>
                  <replacevalue>${project.version}</replacevalue>
                </replace>

                <copy file="${project.build.directory}/dependencies/csc-integral-installer-${com.csc.integral.common.version}.jar"
                    tofile="${installer.payload}/csc-integral-installer.jar"/>

                <!-- GNU tar for Solaris SPARC -->
                <!-- Default tar on Solaris SPARC cannot handle long paths -->
                <copy file="${installer.resources}/tar" todir="${installer.payload}"/>

                <!-- Compression  -->
                <property name="file.name" value="${project.name}-${project.version}"/>
                <tar destfile="${project.build.directory}/${file.name}.tar" basedir="${installer.payload}"/>
                <gzip destfile="${project.build.directory}/${file.name}.tar.gz" src="${project.build.directory}/${file.name}.tar"/>
                <delete file="${project.build.directory}/${file.name}.tar"/>

                <concat destfile="${project.build.directory}/${file.name}.bin" binary="yes">
                  <fileset file="${installer.resources}/extract.sh"/>
                  <fileset file="${project.build.directory}/${file.name}.tar.gz"/>
                </concat>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>

        <dependencies>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-jsch</artifactId>
            <version>1.8.2</version>
          </dependency>

          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>20020829</version>
          </dependency>
        </dependencies>
      </plugin>
    </plugins>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>integral.properties</include>
          <include>messages.properties</include>
        </includes>
      </resource>

      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>integral.properties</exclude>
          <exclude>messages.properties</exclude>
        </excludes>
      </resource>
    </resources>
  </build>

  <dependencies>
    <!-- Overlay -->
    <dependency>
      <groupId>org.jasig.cas</groupId>
      <artifactId>cas-server-webapp</artifactId>
      <version>${cas.version}</version>
      <type>war</type>
      <scope>runtime</scope>
    </dependency>

    <!-- Internal Dependencies -->
    <dependency>
      <groupId>com.csc.integral</groupId>
      <artifactId>csc-integral-style</artifactId>
      <version>${com.csc.integral.common.version}</version>
      <type>war</type>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>com.csc.integral</groupId>
      <artifactId>csc-integral-dao</artifactId>
      <version>${com.csc.integral.common.version}</version>
      <type>jar</type>
    </dependency>

    <dependency>
      <groupId>com.csc.integral</groupId>
      <artifactId>csc-integral-identity</artifactId>
      <version>${com.csc.integral.common.version}</version>
    </dependency>

    <dependency>
      <groupId>com.csc.integral</groupId>
      <artifactId>csc-integral-installer</artifactId>
      <version>${com.csc.integral.common.version}</version>
      <type>jar</type>
      <scope>provided</scope> <!-- only needed during packaging to create the installer -->
    </dependency>

    <dependency>
      <groupId>com.csc.integral</groupId>
      <artifactId>csc-integral-libtcnative</artifactId>
      <version>${com.csc.integral.common.version}</version>
      <type>zip</type>
      <scope>provided</scope> <!-- only needed during packaging to create the installer -->
    </dependency>

    <!-- LDAP -->
    <dependency>
      <groupId>org.jasig.cas</groupId>
      <artifactId>cas-server-support-ldap</artifactId>
      <version>${cas.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.hibernate.javax.persistence</groupId>
          <artifactId>hibernate-jpa-2.0-api</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-commons-annotations</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.hibernate</groupId>
          <artifactId>hibernate-annotations</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <!-- Tiles2 Dependencies -->
    <dependency>
      <groupId>org.apache.tiles</groupId>
      <artifactId>tiles-servlet</artifactId>
      <version>2.2.2</version>
    </dependency>

    <dependency>
      <groupId>org.apache.tiles</groupId>
      <artifactId>tiles-jsp</artifactId>
      <version>2.2.2</version>
    </dependency>

    <!-- Spring -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>${springframework.core.release}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <version>${springframework.core.release}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-core</artifactId>
      <version>${springframework.core.release}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.integration</groupId>
      <artifactId>spring-integration-core</artifactId>
      <version>2.0.3.RELEASE</version>
    </dependency>

    <!-- Hibernate -->
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate</artifactId>
      <version>3.2.7.ga</version>
      <scope>runtime</scope>
      <exclusions>
        <!-- provided by cas-server-webapp overlay -->
        <exclusion>
          <groupId>commons-collections</groupId>
          <artifactId>commons-collections</artifactId>
        </exclusion>
        <!-- provided by cas-server-webapp overlay -->
        <exclusion>
          <groupId>javax.transaction</groupId>
          <artifactId>jta</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-annotations</artifactId>
      <version>3.4.0.GA</version>
      <scope>runtime</scope>
      <exclusions>
        <!-- provided by cas-server-webapp overlay -->
        <exclusion>
          <groupId>commons-collections</groupId>
          <artifactId>commons-collections</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>4.0.2.GA</version>
      <scope>provided</scope> <!-- provided by cas-server-webapp overlay -->
    </dependency>

    <!-- Mail -->
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <version>1.4.1</version>
    </dependency>

    <!-- Others -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <version>2.5</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>velocity</groupId>
      <artifactId>velocity</artifactId>
      <version>1.5</version>
      <exclusions>
        <!-- provided by cas-server-webapp overlay -->
        <exclusion>
          <groupId>commons-collections</groupId>
          <artifactId>commons-collections</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>c3p0</groupId>
      <artifactId>c3p0</artifactId>
      <version>0.9.1.2</version>
    </dependency>

    <dependency>
      <groupId>com.oracle</groupId>
      <artifactId>ojdbc6</artifactId>
      <version>11.2.0.2.0</version>
    </dependency>
    
    <dependency>
		<groupId>com.microsoft</groupId>
		<artifactId>sqljdbc</artifactId>
		<version>4.0</version>
	</dependency>
	
	<dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>1.8.6</version>
    </dependency>
	
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>1.8.6</version>
    </dependency>
	
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.4</version>
    </dependency>
	
    <!-- Test -->
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-all</artifactId>
      <version>1.8.5</version>
      <scope>test</scope>
    </dependency>
    
    <!-- Restlet -->
	<dependency>
    	<groupId>org.jasig.cas</groupId>
    	<artifactId>cas-server-integration-restlet</artifactId>
    	<version>${cas.version}</version>
    	<type>jar</type>
	</dependency>  

  </dependencies>

</project>
